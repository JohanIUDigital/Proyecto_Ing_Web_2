{
  "version": 3,
  "sources": ["../../backend/controllers/productora.controller.js"],
  "sourcesContent": ["//Importamos modelo Mongo DB para operaciones CRUD\r\nconst productoraModel = require(\"../models/productora\");\r\n\r\n//m\u00E9todo para Obtener uno o todos los productoras\r\nexports._getProductoras = async (req, res) => {\r\n  try {\r\n    console.log(req.params);\r\n    let newProductora = new productoraModel();\r\n    const id = req.params.id;\r\n\r\n    //Si llega parametro id busca por activo y id, sino, busca solo los activos\r\n    newProductora = await productoraModel.find(\r\n      id ? { activo: true, _id: id } : { activo: true }\r\n    );\r\n\r\n    //Si encontro datos, los retorna, sino, retorna mensaje de no se encotraron\r\n    res.json(\r\n        newProductora.length > 0\r\n        ? newProductora\r\n        : [{ msg: \"No se encontraron Resultados\" }]\r\n    );\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//m\u00E9todo para crear nuevo productora\r\nexports._createProductora = async (req, res) => {\r\n  try {\r\n    console.log(req.body);\r\n    const nombre = req.body.nombre;\r\n    const activo = req.body.activo;\r\n    const fechaCreacion = req.body.fechaCreacion;\r\n    const fechaActualizacion = req.body.fechaActualizacion;\r\n    const slogan = req.body.slogan;\r\n    const descripcion = req.body.descripcion;\r\n\r\n    // Definimos objeto Modelo Mongo DB productora\r\n    const newProductora = new productoraModel({\r\n      nombre,\r\n      activo,\r\n      fechaCreacion,\r\n      fechaActualizacion,\r\n      slogan,\r\n      descripcion\r\n    });\r\n\r\n    // Guardamos registro en BD Mongo\r\n    await newProductora.save();\r\n    console.log(newProductora);\r\n    res.json({\r\n      msg: `La productora ${nombre} se cre\u00F3 correctamente, el id generado es ${newProductora._id}`,\r\n    });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para actualizar registro, se reciben dos parametros id a cambiar y nueva data\r\nexports._updateProductora = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n    const nombre = req.body.nombre;\r\n    const data = req.body;\r\n    //valida si trae parametro id y data para realizar la actualizacion\r\n    if (_id && data) {\r\n    console.log(data)\r\n      await productoraModel.findByIdAndUpdate(_id, data);\r\n      res.json({\r\n        msg: `La productora ${nombre} (${_id}) se actualiz\u00F3 correctamente`,\r\n      });\r\n    } else {\r\n      res.json({\r\n        msg: `No fue posible realizar la actualizaci\u00F3n de la productora, favor validar datos enviados e intente nuevamente`,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para eliminar registro indicado\r\nexports._deleteProductora = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n\r\n    //Eliminamos registro definitivamente de la base de datos\r\n    await productoraModel.findByIdAndDelete(_id);\r\n    //Actualizamos registro an activo fale para conservar registro\r\n    //await productoraModel.findByIdAndUpdate(_id, { activo: false });\r\n\r\n    // retornamos mensaje de exito\r\n    res.status(200).json({ msg: `La productora ${_id} fue eliminada con \u00E9xito` });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n"],
  "mappings": ";AACA,MAAM,kBAAkB,QAAQ,sBAAsB;AAGtD,QAAQ,kBAAkB,OAAO,KAAK,QAAQ;AAC5C,MAAI;AACF,YAAQ,IAAI,IAAI,MAAM;AACtB,QAAI,gBAAgB,IAAI,gBAAgB;AACxC,UAAM,KAAK,IAAI,OAAO;AAGtB,oBAAgB,MAAM,gBAAgB;AAAA,MACpC,KAAK,EAAE,QAAQ,MAAM,KAAK,GAAG,IAAI,EAAE,QAAQ,KAAK;AAAA,IAClD;AAGA,QAAI;AAAA,MACA,cAAc,SAAS,IACrB,gBACA,CAAC,EAAE,KAAK,+BAA+B,CAAC;AAAA,IAC9C;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,YAAQ,IAAI,IAAI,IAAI;AACpB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,qBAAqB,IAAI,KAAK;AACpC,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,cAAc,IAAI,KAAK;AAG7B,UAAM,gBAAgB,IAAI,gBAAgB;AAAA,MACxC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAGD,UAAM,cAAc,KAAK;AACzB,YAAQ,IAAI,aAAa;AACzB,QAAI,KAAK;AAAA,MACP,KAAK,iBAAiB,MAAM,gDAA6C,cAAc,GAAG;AAAA,IAC5F,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,OAAO,IAAI;AAEjB,QAAI,OAAO,MAAM;AACjB,cAAQ,IAAI,IAAI;AACd,YAAM,gBAAgB,kBAAkB,KAAK,IAAI;AACjD,UAAI,KAAK;AAAA,QACP,KAAK,iBAAiB,MAAM,KAAK,GAAG;AAAA,MACtC,CAAC;AAAA,IACH,OAAO;AACL,UAAI,KAAK;AAAA,QACP,KAAK;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AAGvB,UAAM,gBAAgB,kBAAkB,GAAG;AAK3C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,iBAAiB,GAAG,8BAA2B,CAAC;AAAA,EAC9E,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;",
  "names": []
}
