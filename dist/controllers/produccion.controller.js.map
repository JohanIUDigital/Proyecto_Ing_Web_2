{
  "version": 3,
  "sources": ["../../backend/controllers/produccion.controller.js"],
  "sourcesContent": ["//Importamos modelo Mongo DB para operaciones CRUD\r\nconst produccionModel = require(\"../models/produccion\");\r\n\r\n//m\u00E9todo para Obtener uno o todos los producciones\r\nexports._getProducciones = async (req, res) => {\r\n  try {\r\n    console.log(req.params);\r\n    let newProduccion = new produccionModel();\r\n    const id = req.params.id;\r\n\r\n    //Si llega parametro id busca por activo y id, sino, busca solo los activos\r\n    newProduccion = await produccionModel.find(\r\n      id ? { activo: true, _id: id } : { activo: true }\r\n    );\r\n\r\n    //Si encontro datos, los retorna, sino, retorna mensaje de no se encotraron\r\n    res.json(\r\n      newProduccion.length > 0\r\n        ? newProduccion\r\n        : [{ msg: \"No se encontraron Resultados\" }]\r\n    );\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//m\u00E9todo para crear nuevo produccion\r\nexports._createProduccion = async (req, res) => {\r\n  try {\r\n    console.log(req.body);\r\n    const titulo = req.body.titulo;\r\n    const sinopsis = req.body.sinopsis;\r\n    const link = req.body.link;\r\n    const portada = req.body.portada;\r\n    const anio = req.body.anio;\r\n    const genero = req.body.genero;\r\n    const genero_id = req.body.genero_id;\r\n    const director = req.body.director;\r\n    const director_id = req.body.director_id;\r\n    const productora = req.body.productora;\r\n    const productora_id = req.body.productora_id;\r\n    const tipo = req.body.tipo;\r\n    const tipo_id = req.body.tipo_id;\r\n    const activo = req.body.activo;\r\n    const fechaCreacion = req.body.fechaCreacion;\r\n    const fechaActualizacion = req.body.fechaActualizacion;\r\n/*\r\n    //Validamos si ya existe produccion en BD\r\n    const getProduccion = await produccionModel.find({\r\n        activo: true,\r\n        titulo: titulo,\r\n      });\r\n      console.log(\"getProduccion \", getProduccion.length);\r\n      if (getProduccion.length > 0) {\r\n        res.json({\r\n          msg: `no fue posible crear La Producci\u00F3n, ${titulo} ya existe en la Base de Datos`,\r\n        });\r\n        return;\r\n      }\r\n */     \r\n    // Definimos objeto Modelo Mongo DB produccion\r\n    const newProduccion = new produccionModel({\r\n      titulo,\r\n      sinopsis,\r\n      link,\r\n      portada,\r\n      anio,\r\n      genero,\r\n      genero_id,\r\n      director,\r\n      director_id,\r\n      productora,\r\n      productora_id,\r\n      tipo,\r\n      tipo_id,\r\n      activo,\r\n      fechaCreacion,\r\n      fechaActualizacion,\r\n    });\r\n\r\n    // Guardamos registro en BD Mongo\r\n    await newProduccion.save();\r\n    console.log(newProduccion);\r\n    res.json({\r\n      msg: `La producci\u00F3n ${titulo} se cre\u00F3 correctamente, el id generado es ${newProduccion._id}`,\r\n    });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para actualizar registro, se reciben dos parametros id a cambiar y nueva data\r\nexports._updateProduccion = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n    const titulo = req.body.titulo;\r\n    const data = req.body;\r\n    //valida si trae parametro id y data para realizar la actualizacion\r\n    if (_id && data) {\r\n      console.log(data);\r\n      await produccionModel.findByIdAndUpdate(_id, data);\r\n      res.json({\r\n        msg: `La producci\u00F3n ${titulo} (${_id}) se actualiz\u00F3 correctamente`,\r\n      });\r\n    } else {\r\n      res.json({\r\n        msg: `No fue posible realizar la actualizaci\u00F3n de la producci\u00F3n, favor validar datos enviados e intente nuevamente`,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para eliminar registro indicado\r\nexports._deleteProduccion = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n    //Eliminamos registro definitivamente de la base de datos\r\n    await produccionModel.findByIdAndDelete(_id);\r\n    \r\n    //Actualizamos registro an activo false para conservar registro\r\n    //await produccionModel.findByIdAndUpdate(_id, { activo: false });\r\n\r\n    // retornamos mensaje de exito\r\n    res.status(200).json({ msg: `La producci\u00F3n ${_id} fue eliminada con \u00E9xito` });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n"],
  "mappings": ";AACA,MAAM,kBAAkB,QAAQ,sBAAsB;AAGtD,QAAQ,mBAAmB,OAAO,KAAK,QAAQ;AAC7C,MAAI;AACF,YAAQ,IAAI,IAAI,MAAM;AACtB,QAAI,gBAAgB,IAAI,gBAAgB;AACxC,UAAM,KAAK,IAAI,OAAO;AAGtB,oBAAgB,MAAM,gBAAgB;AAAA,MACpC,KAAK,EAAE,QAAQ,MAAM,KAAK,GAAG,IAAI,EAAE,QAAQ,KAAK;AAAA,IAClD;AAGA,QAAI;AAAA,MACF,cAAc,SAAS,IACnB,gBACA,CAAC,EAAE,KAAK,+BAA+B,CAAC;AAAA,IAC9C;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,YAAQ,IAAI,IAAI,IAAI;AACpB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,WAAW,IAAI,KAAK;AAC1B,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,YAAY,IAAI,KAAK;AAC3B,UAAM,WAAW,IAAI,KAAK;AAC1B,UAAM,cAAc,IAAI,KAAK;AAC7B,UAAM,aAAa,IAAI,KAAK;AAC5B,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,OAAO,IAAI,KAAK;AACtB,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,qBAAqB,IAAI,KAAK;AAgBpC,UAAM,gBAAgB,IAAI,gBAAgB;AAAA,MACxC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAGD,UAAM,cAAc,KAAK;AACzB,YAAQ,IAAI,aAAa;AACzB,QAAI,KAAK;AAAA,MACP,KAAK,oBAAiB,MAAM,gDAA6C,cAAc,GAAG;AAAA,IAC5F,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,OAAO,IAAI;AAEjB,QAAI,OAAO,MAAM;AACf,cAAQ,IAAI,IAAI;AAChB,YAAM,gBAAgB,kBAAkB,KAAK,IAAI;AACjD,UAAI,KAAK;AAAA,QACP,KAAK,oBAAiB,MAAM,KAAK,GAAG;AAAA,MACtC,CAAC;AAAA,IACH,OAAO;AACL,UAAI,KAAK;AAAA,QACP,KAAK;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,oBAAoB,OAAO,KAAK,QAAQ;AAC9C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AAEvB,UAAM,gBAAgB,kBAAkB,GAAG;AAM3C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,oBAAiB,GAAG,8BAA2B,CAAC;AAAA,EAC9E,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;",
  "names": []
}
