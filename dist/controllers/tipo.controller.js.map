{
  "version": 3,
  "sources": ["../../backend/controllers/tipo.controller.js"],
  "sourcesContent": ["//Importamos modelo Mongo DB para operaciones CRUD\r\nconst tipoModel = require(\"../models/tipo\");\r\n\r\n//m\u00E9todo para Obtener uno o todos los Tipos\r\nexports._getTipos = async (req, res) => {\r\n  try {\r\n    console.log(req.params);\r\n    let newTipo = new tipoModel();\r\n    const id = req.params.id;\r\n\r\n    //Si llega parametro id busca por activo y id, sino, busca solo los activos\r\n    newTipo = await tipoModel.find(\r\n      id ? { activo: true, _id: id } : { activo: true }\r\n    );\r\n\r\n    //Si encontro datos, los retorna, sino, retorna mensaje de no se encotraron\r\n    res.json(\r\n      newTipo.length > 0\r\n        ? newTipo\r\n        : [{ msg: \"No se encontraron Resultados\" }]\r\n    );\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//m\u00E9todo para crear nuevo Tipos\r\nexports._createTipo = async (req, res) => {\r\n  try {\r\n    console.log(req.body);\r\n    const nombre = req.body.nombre;\r\n    const descripcion = req.body.descripcion;\r\n    const activo = req.body.activo;\r\n    const fechaCreacion = req.body.fechaCreacion;\r\n    const fechaActualizacion = req.body.fechaActualizacion;\r\n\r\n    //Validamos si ya existe genero en BD\r\n    const getTipo = await tipoModel.find({\r\n      activo: true,\r\n      nombre: nombre,\r\n    });\r\n    console.log(\"getTipo \", getTipo.length);\r\n    if (getTipo.length > 0) {\r\n      res.json({\r\n        msg: `no fue posible crear El Tipo, ${nombre} ya existe en la Base de Datos`,\r\n      });\r\n      return;\r\n    } \r\n\r\n    // Definimos objeto Modelo Mongo DB Tipos\r\n    const newTipo = new tipoModel({\r\n      nombre,\r\n      descripcion,\r\n      activo,\r\n      fechaCreacion,\r\n      fechaActualizacion,\r\n    });\r\n\r\n    // Guardamos registro en BD Mongo\r\n    await newTipo.save();\r\n    console.log(newTipo);\r\n    res.json({\r\n      msg: `El tipo ${nombre} se cre\u00F3 correctamente, el id generado es ${newTipo._id}`,\r\n    });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para actualizar registro, se reciben dos parametros id a cambiar y nueva data\r\nexports._updateTipo = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n    const nombre = req.body.nombre;\r\n    const data = req.body;\r\n\r\n    //valida si trae parametro id y data para realizar la actualizacion\r\n    if (_id && data) {\r\n      await tipoModel.findByIdAndUpdate(_id, data);\r\n      res.json({\r\n        msg: `El tipo ${nombre} (${_id}) se actualiz\u00F3 correctamente`,\r\n      });\r\n    } else {\r\n      res.json({\r\n        msg: `No fue posible realizar la actualizaci\u00F3n del tipo, favor validar datos enviados e intente nuevamente`,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para eliminar registro indicado\r\nexports._deleteTipo = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n\r\n    \r\n    //Eliminamos registro definitivamente de la base de datos\r\n    await tipoModel.findByIdAndDelete(_id);\r\n\r\n    //Actualizamos registro an activo false para conservar registro\r\n    //await tipoModel.findByIdAndUpdate(_id, { activo: false });\r\n\r\n    // retornamos mensaje de exito\r\n    res.status(200).json({ msg: `El tipo ${_id} fue eliminado con \u00E9xito` });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n"],
  "mappings": ";AACA,MAAM,YAAY,QAAQ,gBAAgB;AAG1C,QAAQ,YAAY,OAAO,KAAK,QAAQ;AACtC,MAAI;AACF,YAAQ,IAAI,IAAI,MAAM;AACtB,QAAI,UAAU,IAAI,UAAU;AAC5B,UAAM,KAAK,IAAI,OAAO;AAGtB,cAAU,MAAM,UAAU;AAAA,MACxB,KAAK,EAAE,QAAQ,MAAM,KAAK,GAAG,IAAI,EAAE,QAAQ,KAAK;AAAA,IAClD;AAGA,QAAI;AAAA,MACF,QAAQ,SAAS,IACb,UACA,CAAC,EAAE,KAAK,+BAA+B,CAAC;AAAA,IAC9C;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,cAAc,OAAO,KAAK,QAAQ;AACxC,MAAI;AACF,YAAQ,IAAI,IAAI,IAAI;AACpB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,cAAc,IAAI,KAAK;AAC7B,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,qBAAqB,IAAI,KAAK;AAGpC,UAAM,UAAU,MAAM,UAAU,KAAK;AAAA,MACnC,QAAQ;AAAA,MACR;AAAA,IACF,CAAC;AACD,YAAQ,IAAI,YAAY,QAAQ,MAAM;AACtC,QAAI,QAAQ,SAAS,GAAG;AACtB,UAAI,KAAK;AAAA,QACP,KAAK,iCAAiC,MAAM;AAAA,MAC9C,CAAC;AACD;AAAA,IACF;AAGA,UAAM,UAAU,IAAI,UAAU;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAGD,UAAM,QAAQ,KAAK;AACnB,YAAQ,IAAI,OAAO;AACnB,QAAI,KAAK;AAAA,MACP,KAAK,WAAW,MAAM,gDAA6C,QAAQ,GAAG;AAAA,IAChF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,cAAc,OAAO,KAAK,QAAQ;AACxC,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,OAAO,IAAI;AAGjB,QAAI,OAAO,MAAM;AACf,YAAM,UAAU,kBAAkB,KAAK,IAAI;AAC3C,UAAI,KAAK;AAAA,QACP,KAAK,WAAW,MAAM,KAAK,GAAG;AAAA,MAChC,CAAC;AAAA,IACH,OAAO;AACL,UAAI,KAAK;AAAA,QACP,KAAK;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,cAAc,OAAO,KAAK,QAAQ;AACxC,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AAIvB,UAAM,UAAU,kBAAkB,GAAG;AAMrC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,WAAW,GAAG,8BAA2B,CAAC;AAAA,EACxE,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;",
  "names": []
}
