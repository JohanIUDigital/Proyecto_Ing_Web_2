{
  "version": 3,
  "sources": ["../../backend/controllers/genero.controller.js"],
  "sourcesContent": ["//Importamos modelo Mongo DB para operaciones CRUD\r\nconst generoModel = require(\"../models/genero\");\r\n\r\n//m\u00E9todo para Obtener uno o todos los g\u00E9neros\r\nexports._getGeneros = async (req, res) => {\r\n  try {\r\n    console.log(req.params);\r\n    let newGenero = new generoModel();\r\n    const id = req.params.id;\r\n\r\n    //Si llega parametro id busca por activo y id, sino, busca solo los activos\r\n    newGenero = await generoModel.find(\r\n      id ? { activo: true, _id: id } : { activo: true }\r\n    );\r\n\r\n    //Si encontro datos, los retorna, sino, retorna mensaje de no se encotraron\r\n    res.json(\r\n      newGenero.length > 0\r\n        ? newGenero\r\n        : [{ msg: \"No se encontraron Resultados\" }]\r\n    );\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//m\u00E9todo para crear nuevo G\u00E9nero\r\nexports._createGenero = async (req, res) => {\r\n  try {\r\n    console.log(req.body);\r\n    const nombre = req.body.nombre;\r\n    const descripcion = req.body.descripcion;\r\n    const activo = req.body.activo;\r\n    const fechaCreacion = req.body.fechaCreacion;\r\n    const fechaActualizacion = req.body.fechaActualizacion;\r\n\r\n    //Validamos si ya existe genero en BD\r\n    const getGenero = await generoModel.find({ activo: true, nombre: nombre });\r\n    console.log(\"getGenero \", getGenero.length);\r\n    if (getGenero.length > 0) {\r\n      res.json({\r\n        msg: `no fue posible crear El g\u00E9nero, ${nombre} ya existe en la Base de Datos`,\r\n      });\r\n      return;\r\n    } else {\r\n      // Definimos objeto Modelo Mongo DB G\u00E9nero\r\n      const newGenero = new generoModel({\r\n        nombre,\r\n        descripcion,\r\n        activo,\r\n        fechaCreacion,\r\n        fechaActualizacion,\r\n      });\r\n      // Guardamos registro en BD Mongo\r\n      await newGenero.save();\r\n      console.log(newGenero);\r\n      res.json({\r\n        msg: `El g\u00E9nero ${nombre} se cre\u00F3 correctamente, el id generado es ${newGenero._id}`,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para actualizar registro, se reciben dos parametros id a cambiar y nueva data\r\nexports._updateGenero = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n    const nombre = req.body.nombre;\r\n    const data = req.body;\r\n\r\n    //valida si trae parametro id y data para realizar la actualizacion\r\n    if (_id && data) {\r\n      await generoModel.findByIdAndUpdate(_id, data);\r\n      res.json({\r\n        msg: `El g\u00E9nero ${nombre} (${_id}) se actualiz\u00F3 correctamente`,\r\n      });\r\n    } else {\r\n      res.json({\r\n        msg: `No fue posible realizar la actualizaci\u00F3n del g\u00E9nero, favor validar datos enviados e intente nuevamente`,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n\r\n//M\u00E9todo para eliminar registro indicado\r\nexports._deleteGenero = async (req, res) => {\r\n  try {\r\n    const _id = req.params.id;\r\n\r\n    //Eliminamos registro definitivamente de la base de datos\r\n    await generoModel.findByIdAndDelete(_id);\r\n\r\n    // Actualizamos registro an activo false para conservar registro    \r\n    // await generoModel.findByIdAndUpdate(_id, { activo: false });\r\n\r\n    // retornamos mensaje de exito\r\n    res.status(200).json({ msg: `El g\u00E9nero ${_id} fue eliminado con \u00E9xito` });\r\n  } catch (error) {\r\n    res.json(error);\r\n  }\r\n};\r\n"],
  "mappings": ";AACA,MAAM,cAAc,QAAQ,kBAAkB;AAG9C,QAAQ,cAAc,OAAO,KAAK,QAAQ;AACxC,MAAI;AACF,YAAQ,IAAI,IAAI,MAAM;AACtB,QAAI,YAAY,IAAI,YAAY;AAChC,UAAM,KAAK,IAAI,OAAO;AAGtB,gBAAY,MAAM,YAAY;AAAA,MAC5B,KAAK,EAAE,QAAQ,MAAM,KAAK,GAAG,IAAI,EAAE,QAAQ,KAAK;AAAA,IAClD;AAGA,QAAI;AAAA,MACF,UAAU,SAAS,IACf,YACA,CAAC,EAAE,KAAK,+BAA+B,CAAC;AAAA,IAC9C;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,gBAAgB,OAAO,KAAK,QAAQ;AAC1C,MAAI;AACF,YAAQ,IAAI,IAAI,IAAI;AACpB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,cAAc,IAAI,KAAK;AAC7B,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,qBAAqB,IAAI,KAAK;AAGpC,UAAM,YAAY,MAAM,YAAY,KAAK,EAAE,QAAQ,MAAM,OAAe,CAAC;AACzE,YAAQ,IAAI,cAAc,UAAU,MAAM;AAC1C,QAAI,UAAU,SAAS,GAAG;AACxB,UAAI,KAAK;AAAA,QACP,KAAK,sCAAmC,MAAM;AAAA,MAChD,CAAC;AACD;AAAA,IACF,OAAO;AAEL,YAAM,YAAY,IAAI,YAAY;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,YAAM,UAAU,KAAK;AACrB,cAAQ,IAAI,SAAS;AACrB,UAAI,KAAK;AAAA,QACP,KAAK,gBAAa,MAAM,gDAA6C,UAAU,GAAG;AAAA,MACpF,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,gBAAgB,OAAO,KAAK,QAAQ;AAC1C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AACvB,UAAM,SAAS,IAAI,KAAK;AACxB,UAAM,OAAO,IAAI;AAGjB,QAAI,OAAO,MAAM;AACf,YAAM,YAAY,kBAAkB,KAAK,IAAI;AAC7C,UAAI,KAAK;AAAA,QACP,KAAK,gBAAa,MAAM,KAAK,GAAG;AAAA,MAClC,CAAC;AAAA,IACH,OAAO;AACL,UAAI,KAAK;AAAA,QACP,KAAK;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAGA,QAAQ,gBAAgB,OAAO,KAAK,QAAQ;AAC1C,MAAI;AACF,UAAM,MAAM,IAAI,OAAO;AAGvB,UAAM,YAAY,kBAAkB,GAAG;AAMvC,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,gBAAa,GAAG,8BAA2B,CAAC;AAAA,EAC1E,SAAS,OAAO;AACd,QAAI,KAAK,KAAK;AAAA,EAChB;AACF;",
  "names": []
}
